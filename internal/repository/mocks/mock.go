// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mocks/mock.go -typed
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/Kroning/mytheresa/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepo is a mock of ProductRepo interface.
type MockProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepoMockRecorder
	isgomock struct{}
}

// MockProductRepoMockRecorder is the mock recorder for MockProductRepo.
type MockProductRepoMockRecorder struct {
	mock *MockProductRepo
}

// NewMockProductRepo creates a new mock instance.
func NewMockProductRepo(ctrl *gomock.Controller) *MockProductRepo {
	mock := &MockProductRepo{ctrl: ctrl}
	mock.recorder = &MockProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepo) EXPECT() *MockProductRepoMockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockProductRepo) GetProducts(ctx context.Context, category string, price int) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, category, price)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductRepoMockRecorder) GetProducts(ctx, category, price any) *MockProductRepoGetProductsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductRepo)(nil).GetProducts), ctx, category, price)
	return &MockProductRepoGetProductsCall{Call: call}
}

// MockProductRepoGetProductsCall wrap *gomock.Call
type MockProductRepoGetProductsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProductRepoGetProductsCall) Return(arg0 []*domain.Product, arg1 error) *MockProductRepoGetProductsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProductRepoGetProductsCall) Do(f func(context.Context, string, int) ([]*domain.Product, error)) *MockProductRepoGetProductsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProductRepoGetProductsCall) DoAndReturn(f func(context.Context, string, int) ([]*domain.Product, error)) *MockProductRepoGetProductsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
