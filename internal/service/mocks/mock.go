// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source=deps.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	domain "github.com/Kroning/mytheresa/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProductService is a mock of ProductService interface.
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
	isgomock struct{}
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService.
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance.
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// GetProducts mocks base method.
func (m *MockProductService) GetProducts(ctx context.Context, category string, price int) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, category, price)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductServiceMockRecorder) GetProducts(ctx, category, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductService)(nil).GetProducts), ctx, category, price)
}

// MockDiscountService is a mock of DiscountService interface.
type MockDiscountService struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountServiceMockRecorder
	isgomock struct{}
}

// MockDiscountServiceMockRecorder is the mock recorder for MockDiscountService.
type MockDiscountServiceMockRecorder struct {
	mock *MockDiscountService
}

// NewMockDiscountService creates a new mock instance.
func NewMockDiscountService(ctrl *gomock.Controller) *MockDiscountService {
	mock := &MockDiscountService{ctrl: ctrl}
	mock.recorder = &MockDiscountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountService) EXPECT() *MockDiscountServiceMockRecorder {
	return m.recorder
}

// GetDiscounts mocks base method.
func (m *MockDiscountService) GetDiscounts(ctx context.Context) (domain.Discounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscounts", ctx)
	ret0, _ := ret[0].(domain.Discounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscounts indicates an expected call of GetDiscounts.
func (mr *MockDiscountServiceMockRecorder) GetDiscounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscounts", reflect.TypeOf((*MockDiscountService)(nil).GetDiscounts), ctx)
}
